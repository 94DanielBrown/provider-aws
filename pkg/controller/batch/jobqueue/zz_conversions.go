/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package jobqueue

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/batch"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/batch/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeJobQueuesInput returns input for read
// operation.
func GenerateDescribeJobQueuesInput(cr *svcapitypes.JobQueue) *svcsdk.DescribeJobQueuesInput {
	res := &svcsdk.DescribeJobQueuesInput{}

	return res
}

// GenerateJobQueue returns the current state in the form of *svcapitypes.JobQueue.
func GenerateJobQueue(resp *svcsdk.DescribeJobQueuesOutput) *svcapitypes.JobQueue {
	cr := &svcapitypes.JobQueue{}

	found := false
	for _, elem := range resp.JobQueues {
		if elem.JobQueueArn != nil {
			cr.Status.AtProvider.JobQueueARN = elem.JobQueueArn
		} else {
			cr.Status.AtProvider.JobQueueARN = nil
		}
		if elem.JobQueueName != nil {
			cr.Status.AtProvider.JobQueueName = elem.JobQueueName
		} else {
			cr.Status.AtProvider.JobQueueName = nil
		}
		if elem.Priority != nil {
			cr.Spec.ForProvider.Priority = elem.Priority
		} else {
			cr.Spec.ForProvider.Priority = nil
		}
		if elem.State != nil {
			cr.Status.AtProvider.State = elem.State
		} else {
			cr.Status.AtProvider.State = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.Tags != nil {
			f7 := map[string]*string{}
			for f7key, f7valiter := range elem.Tags {
				var f7val string
				f7val = *f7valiter
				f7[f7key] = &f7val
			}
			cr.Spec.ForProvider.Tags = f7
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateJobQueueInput returns a create input.
func GenerateCreateJobQueueInput(cr *svcapitypes.JobQueue) *svcsdk.CreateJobQueueInput {
	res := &svcsdk.CreateJobQueueInput{}

	if cr.Spec.ForProvider.Priority != nil {
		res.SetPriority(*cr.Spec.ForProvider.Priority)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range cr.Spec.ForProvider.Tags {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetTags(f1)
	}

	return res
}

// GenerateUpdateJobQueueInput returns an update input.
func GenerateUpdateJobQueueInput(cr *svcapitypes.JobQueue) *svcsdk.UpdateJobQueueInput {
	res := &svcsdk.UpdateJobQueueInput{}

	if cr.Spec.ForProvider.Priority != nil {
		res.SetPriority(*cr.Spec.ForProvider.Priority)
	}

	return res
}

// GenerateDeleteJobQueueInput returns a deletion input.
func GenerateDeleteJobQueueInput(cr *svcapitypes.JobQueue) *svcsdk.DeleteJobQueueInput {
	res := &svcsdk.DeleteJobQueueInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "JobQueueNotFoundException"
}
