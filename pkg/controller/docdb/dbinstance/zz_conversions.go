/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/docdb"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/docdb/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBInstancesInput returns input for read
// operation.
func GenerateDescribeDBInstancesInput(cr *svcapitypes.DBInstance) *svcsdk.DescribeDBInstancesInput {
	res := &svcsdk.DescribeDBInstancesInput{}

	if cr.Status.AtProvider.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*cr.Status.AtProvider.DBInstanceIdentifier)
	}

	return res
}

// GenerateDBInstance returns the current state in the form of *svcapitypes.DBInstance.
func GenerateDBInstance(resp *svcsdk.DescribeDBInstancesOutput) *svcapitypes.DBInstance {
	cr := &svcapitypes.DBInstance{}

	found := false
	for _, elem := range resp.DBInstances {
		if elem.AutoMinorVersionUpgrade != nil {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
		}
		if elem.AvailabilityZone != nil {
			cr.Spec.ForProvider.AvailabilityZone = elem.AvailabilityZone
		} else {
			cr.Spec.ForProvider.AvailabilityZone = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Status.AtProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Status.AtProvider.BackupRetentionPeriod = nil
		}
		if elem.CACertificateIdentifier != nil {
			cr.Status.AtProvider.CACertificateIdentifier = elem.CACertificateIdentifier
		} else {
			cr.Status.AtProvider.CACertificateIdentifier = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Status.AtProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Status.AtProvider.DBClusterIdentifier = nil
		}
		if elem.DBInstanceArn != nil {
			cr.Status.AtProvider.DBInstanceARN = elem.DBInstanceArn
		} else {
			cr.Status.AtProvider.DBInstanceARN = nil
		}
		if elem.DBInstanceClass != nil {
			cr.Spec.ForProvider.DBInstanceClass = elem.DBInstanceClass
		} else {
			cr.Spec.ForProvider.DBInstanceClass = nil
		}
		if elem.DBInstanceIdentifier != nil {
			cr.Status.AtProvider.DBInstanceIdentifier = elem.DBInstanceIdentifier
		} else {
			cr.Status.AtProvider.DBInstanceIdentifier = nil
		}
		if elem.DBInstanceStatus != nil {
			cr.Status.AtProvider.DBInstanceStatus = elem.DBInstanceStatus
		} else {
			cr.Status.AtProvider.DBInstanceStatus = nil
		}
		if elem.DBSubnetGroup != nil {
			f10 := &svcapitypes.DBSubnetGroup_SDK{}
			if elem.DBSubnetGroup.DBSubnetGroupArn != nil {
				f10.DBSubnetGroupARN = elem.DBSubnetGroup.DBSubnetGroupArn
			}
			if elem.DBSubnetGroup.DBSubnetGroupDescription != nil {
				f10.DBSubnetGroupDescription = elem.DBSubnetGroup.DBSubnetGroupDescription
			}
			if elem.DBSubnetGroup.DBSubnetGroupName != nil {
				f10.DBSubnetGroupName = elem.DBSubnetGroup.DBSubnetGroupName
			}
			if elem.DBSubnetGroup.SubnetGroupStatus != nil {
				f10.SubnetGroupStatus = elem.DBSubnetGroup.SubnetGroupStatus
			}
			if elem.DBSubnetGroup.Subnets != nil {
				f10f4 := []*svcapitypes.Subnet{}
				for _, f10f4iter := range elem.DBSubnetGroup.Subnets {
					f10f4elem := &svcapitypes.Subnet{}
					if f10f4iter.SubnetAvailabilityZone != nil {
						f10f4elemf0 := &svcapitypes.AvailabilityZone{}
						if f10f4iter.SubnetAvailabilityZone.Name != nil {
							f10f4elemf0.Name = f10f4iter.SubnetAvailabilityZone.Name
						}
						f10f4elem.SubnetAvailabilityZone = f10f4elemf0
					}
					if f10f4iter.SubnetIdentifier != nil {
						f10f4elem.SubnetIdentifier = f10f4iter.SubnetIdentifier
					}
					if f10f4iter.SubnetStatus != nil {
						f10f4elem.SubnetStatus = f10f4iter.SubnetStatus
					}
					f10f4 = append(f10f4, f10f4elem)
				}
				f10.Subnets = f10f4
			}
			if elem.DBSubnetGroup.VpcId != nil {
				f10.VPCID = elem.DBSubnetGroup.VpcId
			}
			cr.Status.AtProvider.DBSubnetGroup = f10
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DbiResourceId != nil {
			cr.Status.AtProvider.DBIResourceID = elem.DbiResourceId
		} else {
			cr.Status.AtProvider.DBIResourceID = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f12 := []*string{}
			for _, f12iter := range elem.EnabledCloudwatchLogsExports {
				var f12elem string
				f12elem = *f12iter
				f12 = append(f12, &f12elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f12
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			f13 := &svcapitypes.Endpoint{}
			if elem.Endpoint.Address != nil {
				f13.Address = elem.Endpoint.Address
			}
			if elem.Endpoint.HostedZoneId != nil {
				f13.HostedZoneID = elem.Endpoint.HostedZoneId
			}
			if elem.Endpoint.Port != nil {
				f13.Port = elem.Endpoint.Port
			}
			cr.Status.AtProvider.Endpoint = f13
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineVersion != nil {
			cr.Status.AtProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Status.AtProvider.EngineVersion = nil
		}
		if elem.InstanceCreateTime != nil {
			cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*elem.InstanceCreateTime}
		} else {
			cr.Status.AtProvider.InstanceCreateTime = nil
		}
		if elem.KmsKeyId != nil {
			cr.Status.AtProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Status.AtProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.PendingModifiedValues != nil {
			f19 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				f19.AllocatedStorage = elem.PendingModifiedValues.AllocatedStorage
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				f19.BackupRetentionPeriod = elem.PendingModifiedValues.BackupRetentionPeriod
			}
			if elem.PendingModifiedValues.CACertificateIdentifier != nil {
				f19.CACertificateIdentifier = elem.PendingModifiedValues.CACertificateIdentifier
			}
			if elem.PendingModifiedValues.DBInstanceClass != nil {
				f19.DBInstanceClass = elem.PendingModifiedValues.DBInstanceClass
			}
			if elem.PendingModifiedValues.DBInstanceIdentifier != nil {
				f19.DBInstanceIdentifier = elem.PendingModifiedValues.DBInstanceIdentifier
			}
			if elem.PendingModifiedValues.DBSubnetGroupName != nil {
				f19.DBSubnetGroupName = elem.PendingModifiedValues.DBSubnetGroupName
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f19.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.Iops != nil {
				f19.IOPS = elem.PendingModifiedValues.Iops
			}
			if elem.PendingModifiedValues.LicenseModel != nil {
				f19.LicenseModel = elem.PendingModifiedValues.LicenseModel
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f19.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.MultiAZ != nil {
				f19.MultiAZ = elem.PendingModifiedValues.MultiAZ
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f19f11 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f19f11f0 := []*string{}
					for _, f19f11f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f19f11f0elem string
						f19f11f0elem = *f19f11f0iter
						f19f11f0 = append(f19f11f0, &f19f11f0elem)
					}
					f19f11.LogTypesToDisable = f19f11f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f19f11f1 := []*string{}
					for _, f19f11f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f19f11f1elem string
						f19f11f1elem = *f19f11f1iter
						f19f11f1 = append(f19f11f1, &f19f11f1elem)
					}
					f19f11.LogTypesToEnable = f19f11f1
				}
				f19.PendingCloudwatchLogsExports = f19f11
			}
			if elem.PendingModifiedValues.Port != nil {
				f19.Port = elem.PendingModifiedValues.Port
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f19.StorageType = elem.PendingModifiedValues.StorageType
			}
			cr.Status.AtProvider.PendingModifiedValues = f19
		} else {
			cr.Status.AtProvider.PendingModifiedValues = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Status.AtProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Status.AtProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.PromotionTier != nil {
			cr.Spec.ForProvider.PromotionTier = elem.PromotionTier
		} else {
			cr.Spec.ForProvider.PromotionTier = nil
		}
		if elem.PubliclyAccessible != nil {
			cr.Status.AtProvider.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			cr.Status.AtProvider.PubliclyAccessible = nil
		}
		if elem.StatusInfos != nil {
			f24 := []*svcapitypes.DBInstanceStatusInfo{}
			for _, f24iter := range elem.StatusInfos {
				f24elem := &svcapitypes.DBInstanceStatusInfo{}
				if f24iter.Message != nil {
					f24elem.Message = f24iter.Message
				}
				if f24iter.Normal != nil {
					f24elem.Normal = f24iter.Normal
				}
				if f24iter.Status != nil {
					f24elem.Status = f24iter.Status
				}
				if f24iter.StatusType != nil {
					f24elem.StatusType = f24iter.StatusType
				}
				f24 = append(f24, f24elem)
			}
			cr.Status.AtProvider.StatusInfos = f24
		} else {
			cr.Status.AtProvider.StatusInfos = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Status.AtProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Status.AtProvider.StorageEncrypted = nil
		}
		if elem.VpcSecurityGroups != nil {
			f26 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f26iter := range elem.VpcSecurityGroups {
				f26elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f26iter.Status != nil {
					f26elem.Status = f26iter.Status
				}
				if f26iter.VpcSecurityGroupId != nil {
					f26elem.VPCSecurityGroupID = f26iter.VpcSecurityGroupId
				}
				f26 = append(f26, f26elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f26
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBInstanceInput returns a create input.
func GenerateCreateDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.CreateDBInstanceInput {
	res := &svcsdk.CreateDBInstanceInput{}

	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.AvailabilityZone != nil {
		res.SetAvailabilityZone(*cr.Spec.ForProvider.AvailabilityZone)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f9 := []*svcsdk.Tag{}
		for _, f9iter := range cr.Spec.ForProvider.Tags {
			f9elem := &svcsdk.Tag{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetTags(f9)
	}

	return res
}

// GenerateModifyDBInstanceInput returns an update input.
func GenerateModifyDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.ModifyDBInstanceInput {
	res := &svcsdk.ModifyDBInstanceInput{}

	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Status.AtProvider.CACertificateIdentifier != nil {
		res.SetCACertificateIdentifier(*cr.Status.AtProvider.CACertificateIdentifier)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}

	return res
}

// GenerateDeleteDBInstanceInput returns a deletion input.
func GenerateDeleteDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.DeleteDBInstanceInput {
	res := &svcsdk.DeleteDBInstanceInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBInstanceNotFound"
}
